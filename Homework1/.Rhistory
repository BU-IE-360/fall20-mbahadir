unif <- sort(unif)
plot(unif, pch = 2, col = "red") # ylim = c(min(norm_dist),max(norm_dist))
points(norm_dist, pch = 6, col = 5) #cex
points(norm_dist, pch = 6, col = 4) #cex
ylim = c(min(norm_dist),max(norm_dist))
?cex
?cex
lines(unif,col = "blue")
legend("topleft",cex = 0.5, legend = c("Sorted_Uniform", "Sorted_Normal"),col = c("red",5), pch = c(2,6))
lines(norm_dist, col = "green")
par(mfrow = c(1,2))
plot(unif, pch = 2, col = "red")
plot(norm_dist)
num <- 1000000
time_1 <- system.time(y <- rnorm(num))
time_2 <- system.time(for(i in 1:num){x[i] <- rnorm(1)})
time_2
time_1
time_2 <- system.time(for(i in 1:num){x[i] <- rnorm(1)})
#Basic R Objects
#Matrices
mat1 <- matrix(1:9,3)
matrix
#Basic R Objects
#Matrices
mat1 <- matrix(1:9,3)
mat1
matrix(1:9,3,2)
matrix(1:9,9,1)
mat2 <- matrix(1:9,3, byrow = TRUE)
mat1 + mat2
mat1 * mat2 #product of respective elements
mat1 %*% mat2 #matrix multiplication
t(mat2)
mat1 == t(mat2)
mat2
identical(mat1,t(mat2))
identical(mat1,t(t(mat1)))
#Data Frames
id <- 1:5
names <- c("Ali","Ay?e","Mehmet","Zeynep","Osman")
salary <- c(5000, 3000, 10000, 2500, 50000)
education <- c("High School", "Undergrad", "Undergrad", "Elementary", "Grad")
people <- data.frame(id,names,salary,education)
colnames(people)
rownames(people)
names_of_rows <- c("x","y","z","q","e")
rownames(people) <- names_of_rows
colnames(people) <- c("col1","col2","col3","col4")
people$education
levels(people$education) <- c("Elementary","High School", "Undergrad","Grad")
lass(people$education)
class(people$education)
2+2
3^4
log(exp(2))
log(10)
23 %/% 2 #integer division
23 %% 2 #mode
23 / 2
Val <- 5
val = 4
Val = val + 2*Val
Val
val == Val
bool <- val == Val
bool <- val = Val
val = Val
val = Val
val = Val
val == Val
val > Val
val >= Val
val < Val
val != Val
val > Val
seq1 <- 1.5:5.8
seq1
seq1 <- 5:-10
seq1
seq1 <- 1.5:5.8
seq3 <- seq(5.6,10,length.out = 8)
seq3
vec3[2]
vec3 <- c("This", "is", "IE", '256', 'class')
vec3[2]
vec1[1]
vec1 <- c(3,5,7.8)
vec1[1]
vec1[5] <- 19
vec2[3] <- -22
vec3[-4]
vec3[3] <- -2
vec3[-4]
vec5 <- rnorm(50)
vec5[1:10]
index <- c(1,18,rep(c(2,3),2),seq(7,10,by=1),12:18)
vec5[index]
vec5[1,18,2,3]
vec5[1,18,2,3]
vec5[1 3]
vec5[1]
vec5[1,18]
vec5[c(1,18)]
vec6 <- vec5[c(1,18,rep(c(2,3),2),seq(7,10,by=1),12:18)]
vec5[index] == vec6
identical(vec5[index], vec6)
vec5== vec6
5[index]
vec6 <- vec5[c(1,18,rep(c(2,3),2),seq(7,10,by=1),12:18)]
index <- c(1,18,rep(c(2,3),2),seq(7,10,by=1),12:18)
vec5[index]
vec5 <- rnorm(50)
vec5[index]
vec6 <- vec5[c(1,18,rep(c(2,3),2),seq(7,10,by=1),12:18)]
vec5[index] == vec6
vec5 == vec6
boolindex <- c(TRUE,FALSE,TRUE,TRUE,FALSE)
vec7 <- 1:5
vec7[boolindex]
boolindex
vec5[vec5 > 0.3]
boolindex2 <- vec5 < 0.4
vec5[boolindex2]
boolindex2
vec5 > 0.3
vec5[vec5 > 0.3]
which(vec5>0.3)
vec5[which(vec5>0.3)] == vec5[vec5 > 0.3]
rank(vec5)
vec5[order(vec5)]
order(vec5)
sort(vec5)
sort(vec5) == vec5[order(vec5)]
vec1 <- rnorm(10)
vec2 <- 1:10
vec1 + vec2
vec1^vec2
vec1 <- 1:10
vec1^vec2
vec1 > vec2
vec1 <- rnorm(10)
vec1 < 0.5 & vec2 > 5 #AND
vec1 <- rnorm(100)
vec1 <- rnorm(100)
mean(vec1)
median(vec1)
sd(vec1)
class(vec1)
typeof(vec1)
summary(vec1)
class(mean)
vec <- 1:10
length(vec)
class(length)
vec[13] <- 5
length(vec)
is.na(vec)
vec[is.na(vec)]<-0
vec
length(vec1)
sd(vec1)
vec1[105] <- 6
sd(vec1)
sd(vec1, na.rm = TRUE)
dpois(5,10)
norm_dist <- rnorm(100,5,3)
plot(norm_dist)
hist(norm_dist)
hist(norm_dist)
hist(norm_dist,breaks = 50)
boxplot(norm_dist)
boxplot(norm_dist, main = "Boxplot of Normal Dist.", xlab = "X - Axis", ylab = "Y-Axis")
unif <- runif(100)
unif <- sort(unif)
norm_dist <- sort(rnorm(100))
fnc <-function(x){
if(x<(-2)){
x^2
}else if (x<0){
x+6
}else if(x<4){
-x+6
}else{
sqrt(x)
}
}
fnc(-1)
a <- fnc(10)
a
fnc(10)
c <- sapply(-5:10,fnc)
c <- sapply(-5:10,fnc)
c
toplama<-function(x){while(x>0){total=total+x x--} total }
#Basic R Objects
#Matrices
mat1 <- matrix(1:9,3)
matrix(1:9,9,1)
#Basic R Objects
#Matrices
mat1 <- matrix(1:9,9)
mat1
#Basic R Objects
#Matrices
mat1 <- matrix(1:9,9)
mat1
#Basic R Objects
#Matrices
mat1 <- matrix(1:9,3)
mat1
mat2 <- matrix(1:9,3, byrow = TRUE)
mat1 * mat2 #product of respective elements
mat1 %*% mat2 #matrix multiplication
`df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details` <- readRDS("~/Downloads/df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details.rds")
`df9b1196-e3cf-4cc7-9159-f236fe738215_matches` <- readRDS("~/Downloads/df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds")
View(`df9b1196-e3cf-4cc7-9159-f236fe738215_matches`)
View(`df9b1196-e3cf-4cc7-9159-f236fe738215_matches`)
View(`df9b1196-e3cf-4cc7-9159-f236fe738215_matches`)
View(`df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details`)
View(`df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details`)
View(`df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details`)
View(`df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details`)
View(`df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details`)
View(`df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details`)
View(`df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details`)
View(`df9b1196-e3cf-4cc7-9159-f236fe738215_matches`)
View(`df9b1196-e3cf-4cc7-9159-f236fe738215_matches`)
View(`df9b1196-e3cf-4cc7-9159-f236fe738215_matches`)
#first install
getwd()
number_of_sampling=100
sample_size=5 # now sample size is one
random_numbers=rnorm(number_of_sampling*sample_size,mean=5,sd=2)
hist(random_numbers)
random_matrix
random_matrix(random_numbers,ncol=sample_size)
random_matrix=(random_numbers,ncol=sample_size)
random_matrix=matrix(random_numbers,ncol=sample_size)
random_matrix
number_of_sampling=1000
sample_size_set=c(5,10,20,30,50,1000)
# plot orientation
par(mfrow=c(2,3))
for(i in sample_size_set){
sample_size=i
random_numbers=rpois(number_of_sampling*sample_size,30)
random_matrix=matrix(random_numbers,ncol=sample_size)
sample_means=rowMeans(random_matrix)
hist(sample_means,main=paste('Sample size',i))
# uncomment if you would like to see qqplots
# qqnorm(sample_means,main=paste('Sample size',i))
# qqline(sample_means)
}
number_of_sampling=1000
sample_size_set=c(5,10,20,30,50,1000)
# plot orientation
for(i in sample_size_set){
sample_size=i
random_numbers=rpois(number_of_sampling*sample_size,30)
random_matrix=matrix(random_numbers,ncol=sample_size)
sample_means=rowMeans(random_matrix)
hist(sample_means,main=paste('Sample size',i))
# uncomment if you would like to see qqplots
# qqnorm(sample_means,main=paste('Sample size',i))
# qqline(sample_means)
}
number_of_sampling=1000
sample_size_set=c(5,10,20,30,50,1000)
# plot orientation
for(i in sample_size_set){
sample_size=i
random_numbers=rpois(number_of_sampling*sample_size,30)
random_matrix=matrix(random_numbers,ncol=sample_size)
sample_means=rowMeans(random_matrix)
hist(sample_means,main=paste('Sample size',i))
# uncomment if you would like to see qqplots
# qqnorm(sample_means,main=paste('Sample size',i))
# qqline(sample_means)
}
number_of_sampling=1000
sample_size_set=c(5,10,20,30,50,1000)
# plot orientation
for(i in sample_size_set){
sample_size=i
random_numbers=rpois(number_of_sampling*sample_size,30)
random_matrix=matrix(random_numbers,ncol=sample_size)
random_matrix
}
random_matrix
random_matrix
number_of_sampling=1000
sample_size_set=c(5,10,20,30,50,1000)
# plot orientation
for(i in sample_size_set){
sample_size=i
random_numbers=rpois(number_of_sampling*sample_size,30)
random_matrix=matrix(random_numbers,ncol=sample_size)
sample_means=rowMeans(random_matrix)
hist(sample_means,main=paste('Sample size',i))
# uncomment if you would like to see qqplots
# qqnorm(sample_means,main=paste('Sample size',i))
# qqline(sample_means)
}
number_of_sampling=1000
sample_size_set=c(5,10,20,30,50,1000)
# plot orientation
par(mfrow=c(2,3))
for(i in sample_size_set){
sample_size=i
random_numbers=rpois(number_of_sampling*sample_size,30)
random_matrix=matrix(random_numbers,ncol=sample_size)
sample_means=rowMeans(random_matrix)
hist(sample_means,main=paste('Sample size',i))
# uncomment if you would like to see qqplots
# qqnorm(sample_means,main=paste('Sample size',i))
# qqline(sample_means)
}
a=rnorm(10000);
b=rpois(10000)
b=rpois(10000,1)
qqplot(a,b)
qqplot(b,a)
c=rnorm(10000,0)
qqplot(b,c)
install.packages('tabledata')
require(data.table)#Warning
library(data.table)#error
setwd('Users/baha/Downloads/')
matches=readRDS('df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds')
source('~/.active-rstudio-document')
matches=readRDS('df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds')
setwd('Users/baha/Downloads/')
matches=readRDS('df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds')
install.packages('tabledata')
require(data.table)#Warning
library(data.table)#error
setwd('Users/baha/Downloads/')
matches=readRDS('df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds')
install.packages('tabledata')
require(data.table)#Warning
library(data.table)#error
setwd('Kullanıcılar/baha/İndirilenler/')
matches=readRDS('df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds')
install.packages('tabledata')
require(data.table)#Warning
library(data.table)#error
setwd('Kullanıcılar/baha/İndirilenler/')
matches=readRDS('df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds')
str(matches)
View(matches)
install.packages('tabledata')
require(data.table)#Warning
library(data.table)#error
setwd('Kullanıcılar/baha/İndirilenler/')
matches=readRDS('df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds')
#first install data.table
#install.packages('data.table')
#then load it with require
require(data.table)
library(data.table)
setwd('Kullanıcılar/baha/İndirilenler/')
matches=readRDS('df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds')
setwd('Kullanıcılar/baha/İndirilenler/')
matches=readRDS('df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds')
setwd('Users/baha/Downloads/')
matches=readRDS('df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds')
setwd('Users/baha/Downloads/')
matches=readRDS('df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds')
setwd('Users/baha/Downloads/256/')
matches=readRDS('df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds')
setwd('Users/baha/Downloads/256/')
setwd('Users/baha/Downloads/256/')
setwd('Users/baha/Downloads/256/')
#first install data.table
#install.packages('data.table')
#then load it with require
require(data.table)
library(data.table)
setwd('C:/Users/baha/Downloads/256/')
matches=readRDS('df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds')
setwd('C:/Users/baha/Downloads/256/')
setwd('C:/Users/baha/Downloads/256/')
matches=readRDS('df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds')
source('~/.active-rstudio-document')
setwd('C:/Users/baha/Downloads/256/')
sd(c(5,8,12))
which.min(c(4,1,6))
which.min(c(4,1,6))
8*6
2^16
2^
8*10
sqrt(2)
abs(-5)
help sqrt
?sqrt
help.sqrt
SquareRoot2=sqrt(2)
SquareRoot2
HoursYear <- 5*40
ls()
Homeland <- 6*7;
ls()
load("~/.RData")
ls()
SquareRoo2=sqrt(5)
SquareRoo2=sqrt(5);
Homeland <- 6*7;
Homeland <- 6*7
SquareRoo2=sqrt(5)
SquareRoo2=sqrt(5)
Homeland <- 6*7
c(2,3,5,8,13)
Homeland <- 6*7
Homeland <- 6*7
Country = c("Brazil","China","India","Turkey","USA")
Country = c("Brazil","China","India","Turkey","USA")
LifeExpectancy  = c(74,76,65,83,79)
ls()
Country
LifeExpectancy
Country[1]
LifeExpectancy[3]
seq(0,100,2)
CountrData=data.frame(Country,LifeExpectancy)
CountrData
getwd()
?setwd
setwd(/Users/baha/R)
setwd(/Users/baha/R/)
setwd(Users/baha/R/)
setwd(Users/baha/R)
setwd(/Users/baha/R)
setwd("/Users/baha/R")
read.csv(USDA.csv)
read.csv("USDA.csv")
USDA=read.csv("USDA.csv")
str(USDA)
summary(USDA)
USDA$Sodium
which.max(USDA$Sodium)
USDA$ID[265]
USDA$Description[265]
USDA$Description[265]
names(USDA)
ls()
HighSodium=subset(USDA, USDA$Sodium>10000)
HighSodium=subset(USDA, Sodium>10000)
nrow(HighSodium)
HighSodium
HighSodium$Description
names(HighSodium)
match("CAVIAR", USDA$Description)
USDA$Sodium[4154]
USDA$Sodium[match("CAVIAR",USDA$Description)]
sd(USDA$Sodium,na.rm=TRUE)
plot(USDA$Protein,USDA$TotalFat)
plot(USDA$Protein,USDA$TotalFat)
plot(USDA$Protein,USDA$TotalFat,xlab="Protein",ylab="Fat",main="Protein vs Fat",col="red")
hist(USDA$VitaminC,xlab="Vitamin C (mg)",main="Histogram of Vitamin C levels")
hist(USDA$VitaminC,xlab="Vitamin C (mg)",main="Histogram of Vitamin C levels",100)
hist(USDA$VitaminC,xlab="Vitamin C (mg)",main="Histogram of Vitamin C levels",10)
hist(USDA$VitaminC,xlab="Vitamin C (mg)",main="Histogram of Vitamin C levels",xlim=c(0,100),100)
hist(USDA$VitaminC,xlab="Vitamin C (mg)",main="Histogram of Vitamin C levels",xlim=c(0,100),2000)
#Bu histogramda xlim ile min ve maks sayısını assign ettik, 2000 ile de kaç cell istediğimizi(max value geçerli)
boxplot(USDA$Sugar)
#Bu histogramda xlim ile min ve maks sayısını assign ettik, 2000 ile de kaç cell istediğimizi(max value geçerli)
boxplot(USDA$Sugar, main="Boxplot of Sugar leves")
#Bu histogramda xlim ile min ve maks sayısını assign ettik, 2000 ile de kaç cell istediğimizi(max value geçerli)
boxplot(USDA$Sugar, main="Boxplot of Sugar leves",ylab="Sugar Level")
#Bu histogramda xlim ile min ve maks sayısını assign ettik, 2000 ile de kaç cell istediğimizi(max value geçerli)
boxplot(USDA$Sugar, main="Boxplot of Sugar leves",ylab="Sugar (g)")
HighSodium=USDA$Sodium > mean(USDA$Sodium, na.rm=TRUE)
str(HighSodium)
HighSodium=as.numeric(USDA$Sugar> mean(USDA$Sodium, na.rm=TRUE))
HighSodium=as.numeric( USDA$Sodium > mean(USDA$Sodium, na.rm=TRUE))
USDA$HighSodium=as.numeric(USDA$Sodium< > mean(USDA$Sodium, na.rm=TRUE))#USDA'e yeni bir variable ekliyoruz
str(USDA)
e
USDA$HighSodium=as.numeric(USDA$Sodium< > mean(USDA$Sodium, na.rm=TRUE))#USDA'e yeni bir variable ekliyoruz
USDA$HighSodium=as.numeric(USDA$Sodium > mean(USDA$Sodium, na.rm=TRUE))#USDA'e yeni bir variable ekliyoruz
str(USDA)
USDA$HighProtein=as.numeric(USDA$Protein > mean(USDA$Protein, na.rm=TRUE))
USDA$HighFat=as.numeric(USDA$Fat > mean(USDA$Fat, na.rm=TRUE))
USDA$HighCarbohydrate=as.numeric(USDA$Carbohydrate > mean(USDA$Carbohydrate, na.rm=TRUE))
USDA$HighFat=as.numeric(USDA$TotalFat > mean(USDA$TotalFat, na.rm=TRUE))
str(USDA)
str(USDA$HighCarbohydrate)
table(USDA$HighCarbohydrate)
table(USDA$HighSodium)
table(USDA$HighSodium, USDA$HighFat)
tapply(USDA$HighSodium, USDA$Protein, mean, na.rm=TRUE)
tapply(USDA$HighSodium, USDA$HighProtein, mean, na.rm=TRUE)
tapply(USDA$Iron, USDA$HighProtein, mean, na.rm=TRUE)
tapply(USDA$VitaminC, USDA$HighCarbohydrate, max, na.rm=TRUE)
tapply(USDA$VitaminC, USDA$HighCarbohydrate, summary, na.rm=TRUE)
library(ggplot2)
#PART B
EVDS=read.xlsx("EVDS.xlsx",sheetIndex=1, header=TRUE)
summary(EVDS)
str(EVDS)
setwd("~/Github/IE 360/fall20-mbahadir/Homework1")
#PART B
EVDS=read.xlsx("EVDS.xlsx",sheetIndex=1, header=TRUE)
library(xlsx)
library(zoo)
library(lubridate)
install.packages("lubridate")
library(lubridate)
install.packages("lubridate")
library(lubridate)
